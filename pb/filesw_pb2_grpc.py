# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pb.filesw_pb2 as filesw__pb2


class FileServerStub(object):
    """python3 -m grpc_tools.protoc --proto_path=./proto --python_out=./pb --grpc_python_out=./pb ./proto/central.proto

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LS = channel.unary_unary(
                '/file.FileServer/LS',
                request_serializer=filesw__pb2.Request.SerializeToString,
                response_deserializer=filesw__pb2.Response.FromString,
                )
        self.CAT = channel.unary_unary(
                '/file.FileServer/CAT',
                request_serializer=filesw__pb2.Request.SerializeToString,
                response_deserializer=filesw__pb2.Response.FromString,
                )
        self.CP = channel.unary_unary(
                '/file.FileServer/CP',
                request_serializer=filesw__pb2.Request.SerializeToString,
                response_deserializer=filesw__pb2.Response.FromString,
                )
        self.PWD = channel.unary_unary(
                '/file.FileServer/PWD',
                request_serializer=filesw__pb2.Request.SerializeToString,
                response_deserializer=filesw__pb2.Response.FromString,
                )
        self.NEW = channel.unary_unary(
                '/file.FileServer/NEW',
                request_serializer=filesw__pb2.CPReq.SerializeToString,
                response_deserializer=filesw__pb2.Response.FromString,
                )
        self.ShareKey = channel.unary_unary(
                '/file.FileServer/ShareKey',
                request_serializer=filesw__pb2.CPReq.SerializeToString,
                response_deserializer=filesw__pb2.Response.FromString,
                )


class FileServerServicer(object):
    """python3 -m grpc_tools.protoc --proto_path=./proto --python_out=./pb --grpc_python_out=./pb ./proto/central.proto

    """

    def LS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CAT(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PWD(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NEW(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShareKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LS': grpc.unary_unary_rpc_method_handler(
                    servicer.LS,
                    request_deserializer=filesw__pb2.Request.FromString,
                    response_serializer=filesw__pb2.Response.SerializeToString,
            ),
            'CAT': grpc.unary_unary_rpc_method_handler(
                    servicer.CAT,
                    request_deserializer=filesw__pb2.Request.FromString,
                    response_serializer=filesw__pb2.Response.SerializeToString,
            ),
            'CP': grpc.unary_unary_rpc_method_handler(
                    servicer.CP,
                    request_deserializer=filesw__pb2.Request.FromString,
                    response_serializer=filesw__pb2.Response.SerializeToString,
            ),
            'PWD': grpc.unary_unary_rpc_method_handler(
                    servicer.PWD,
                    request_deserializer=filesw__pb2.Request.FromString,
                    response_serializer=filesw__pb2.Response.SerializeToString,
            ),
            'NEW': grpc.unary_unary_rpc_method_handler(
                    servicer.NEW,
                    request_deserializer=filesw__pb2.CPReq.FromString,
                    response_serializer=filesw__pb2.Response.SerializeToString,
            ),
            'ShareKey': grpc.unary_unary_rpc_method_handler(
                    servicer.ShareKey,
                    request_deserializer=filesw__pb2.CPReq.FromString,
                    response_serializer=filesw__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'file.FileServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileServer(object):
    """python3 -m grpc_tools.protoc --proto_path=./proto --python_out=./pb --grpc_python_out=./pb ./proto/central.proto

    """

    @staticmethod
    def LS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileServer/LS',
            filesw__pb2.Request.SerializeToString,
            filesw__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CAT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileServer/CAT',
            filesw__pb2.Request.SerializeToString,
            filesw__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileServer/CP',
            filesw__pb2.Request.SerializeToString,
            filesw__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PWD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileServer/PWD',
            filesw__pb2.Request.SerializeToString,
            filesw__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NEW(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileServer/NEW',
            filesw__pb2.CPReq.SerializeToString,
            filesw__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShareKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file.FileServer/ShareKey',
            filesw__pb2.CPReq.SerializeToString,
            filesw__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
